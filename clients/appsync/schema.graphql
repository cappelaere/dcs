schema {
  query: Data
  mutation: Mutation
  subscription: Subscription
}

interface Dcp {
  BinaryMsg: String!
  LocalRecvTime: AWSDateTime!
  cid: ID!
}

type Data {
  getGoesDcp(cid: String): GoesDcp
  getGoesDcps(agency: String, limit: Int, platformId: String, sat: String!): [GoesDcp]
  getGrb(cid: String, class: String): GoesGrb
  getGrbs(dsn: String, eventTime: AWSDateTime, filter: FilterGrbInput, instrument: String, level: String, limit: Int, satellite: String): [GoesGrb]
}

type DcsMutationType {
  agency: String
  cid: ID!
  platformId: String!
  sat: String!
}

type GoesDcp implements Dcp {
  Baud: Int!
  BinaryMsg: String!
  CarrierStart: String!
  CarrierStop: String!
  DomsatSeq: Int!
  DomsatTime: Int!
  FreqOffset: Float!
  GoodPhasePct: Int!
  LocalRecvTime: AWSDateTime!
  PhaseNoise: Float!
  SignalStrength: Float!
  agency: String
  cid: ID!
  flags: String!
  platformId: String!
  sat: String!
}

type GoesGrb {
  cid: ID!
  creationTime: AWSDateTime
  dsn: String
  endTime: AWSDateTime
  eventTime: AWSDateTime
  fileName: String
  fileSize: Int
  instrument: String
  level: String
  mode: String
  satellite: String
  startTime: AWSDateTime
  stores: [Store]
}

type GrbMutationType {
  cid: ID!
  dsn: String
  instrument: String
  level: String
  mode: String
  satellite: String
}

type IridiumDcp implements Dcp {
  BinaryMsg: String!
  CDR_Reference: Int!
  LocalRecvTime: AWSDateTime!
  MOMSM: Int!
  XmitTime: String!
  cid: ID!
}

type Mutation {
  newDcp(agency: String, cid: ID, platformId: String, sat: String): DcsMutationType
  newGrb(cid: ID, dsn: String, instrument: String, level: String, mode: String, satellite: String): GrbMutationType
}

type Store {
  account: String
  bucket: String
  cid: ID!
  class: String
  key: String
  mtime: String
  type: String
  url: String
}

type Subscription {
  newDcp: DcsMutationType @aws_subscribe(mutations : ["newDcp"])
  newGrb: GrbMutationType @aws_subscribe(mutations : ["newGrb"])
}

input FilterGrbInput {
  description: GrbStringFilterInput
  dsn: GrbStringFilterInput
  eventTime: GrbStringFilterInput
  instrument: GrbStringFilterInput
  level: GrbStringFilterInput
  mode: GrbStringFilterInput
  rating: GrbStringFilterInput
  satellite: GrbStringFilterInput
  searchField: GrbStringFilterInput
}

input GrbStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}
