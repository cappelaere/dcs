//
// dcs_data lambda.
//
//  It is triggered by an SNS topic generated by incoming DCS-GOES or DCS_IRIDIUM topics
//
// Pat Cappelaere, IBM Federal
//
const { XMLParseString } = require('./xmlparse.js')
const moment = require('moment')

const ParseXml = (xmlMessage) => {
  const json = XMLParseString(xmlMessage)

  const DcpMsg = json.DcpMsg
  DcpMsg.LocalRecvTime = moment(DcpMsg.LocalRecvTime, "YYYY/DDD HH:mm:ss.SSSS").format()

  if (DcpMsg.CarrierStart) DcpMsg.CarrierStart = moment(DcpMsg.CarrierStart, "YYYY/DDD HH:mm:ss.SSSS").format()
  if (DcpMsg.CarrierStop) DcpMsg.CarrierStop = moment(DcpMsg.CarrierStop, "YYYY/DDD HH:mm:ss.SSSS").format()
  if (DcpMsg.DomsatTime) DcpMsg.DomsatTime = moment(DcpMsg.DomsatTime, "YYYY/DDD HH:mm:ss.SSSS").format()
  if (DcpMsg.XmitTime) DcpMsg.XmitTime = moment(DcpMsg.XmitTime, "YYYY/DDD HH:mm:ss.SSSS").format()
  return DcpMsg
}

exports.handler = async (event) => {
  try {
    const SNSRecord = event.Records[0]

    const topic = SNSRecord.Sns.TopicArn
    const xmlMessage = SNSRecord.Sns.Message
    const json = ParseXml(xmlMessage)

    console.log(topic)
    console.log(xmlMessage)
    console.log(JSON.stringify(json, null, '\t'))

    const response = {
      statusCode: 200,
      body: 'OK'
    }
    return response;
  } catch (err) {
    console.err(err)
    const response = {
      statusCode: 500,
      body: 'Err'
    }
    return response;

  }
};
